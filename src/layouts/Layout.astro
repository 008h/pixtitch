---
import Footer from '../components/Footer.astro';
import Header from '../components/Header.astro';
import { getCurrentImageType } from '../utils/imageType';
import { getCurrentTheme } from '../utils/theme';
import '../styles/global.css';

interface Props {
	title: string;
}

const { title } = Astro.props;
const currentImageType = getCurrentImageType();
const currentTheme = getCurrentTheme();
---

<!doctype html>
<html lang="ja" data-theme={currentTheme} data-image-type={currentImageType}>
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<meta name="generator" content={Astro.generator} />
		<meta name="robots" content="noindex, nofollow">
		<link rel="icon" type="image/svg+xml" href={`${import.meta.env.BASE_URL}favicon.svg`} />
		<title>{title}</title>
		<script is:inline>
			// ページ読み込み時にテーマを設定
			(function() {
				const theme = localStorage.getItem('theme') || 
					(window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');
				document.documentElement.setAttribute('data-theme', theme);
			})();
		</script>
		<script>
			// カスタムイベントの型定義
			interface ThemeChangeEvent extends CustomEvent {
				detail: {
					theme: 'light' | 'dark';
				};
			}

			interface ImageTypeChangeEvent extends CustomEvent {
				detail: {
					type: 'cross-stitch' | 'pixel' | 'pattern';
				};
			}

			// グローバルな状態管理
			let currentTheme = localStorage.getItem('theme') || 
				(window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');
			let currentImageType = localStorage.getItem('imageType') || 'cross-stitch';

			// イベントリスナーの設定
			function setupEventListeners() {
				// View Transitions APIのサポートを確認
				if (document.startViewTransition) {
					// カスタムイベントをリッスン
					document.addEventListener('themeChange', ((e: ThemeChangeEvent) => {
						currentTheme = e.detail.theme;
						document.startViewTransition(() => {
							document.documentElement.setAttribute('data-theme', currentTheme);
							localStorage.setItem('theme', currentTheme);
						});
					}) as EventListener);

					document.addEventListener('imageTypeChange', ((e: ImageTypeChangeEvent) => {
						currentImageType = e.detail.type;
						document.startViewTransition(() => {
							document.documentElement.setAttribute('data-image-type', currentImageType);
							localStorage.setItem('imageType', currentImageType);
							
							// すべての画像コンテナを更新
							document.querySelectorAll('.pattern-container').forEach((container) => {
								const images = container.querySelectorAll('img[data-pattern-type]');
								images.forEach((img) => {
									if (img.getAttribute('data-pattern-type') === currentImageType) {
										img.classList.remove('hidden');
									} else {
										img.classList.add('hidden');
									}
								});
							});
						});
					}) as EventListener);

					// ページ遷移のアニメーションを設定
					document.addEventListener('click', (e) => {
						const target = e.target as HTMLElement;
						const link = target.closest('a');
						if (link && link.href && link.href.startsWith(window.location.origin)) {
							e.preventDefault();
							document.startViewTransition(async () => {
								await navigate(link.href);
							});
						}
					});
				}
			}

			// ページ遷移の関数
			async function navigate(url: string) {
				try {
					const response = await fetch(url);
					if (!response.ok) throw new Error('Network response was not ok');
					
					const html = await response.text();
					const parser = new DOMParser();
					const doc = parser.parseFromString(html, 'text/html');

					// メインコンテンツのみを更新
					const newMain = doc.querySelector('main');
					const currentMain = document.querySelector('main');
					if (newMain && currentMain) {
						currentMain.innerHTML = newMain.innerHTML;
					}

					// タイトルを更新
					const newTitle = doc.querySelector('title');
					if (newTitle) {
						document.title = newTitle.textContent || '';
					}

					// 現在の状態を維持
					document.documentElement.setAttribute('data-theme', currentTheme);
					document.documentElement.setAttribute('data-image-type', currentImageType);

					// 履歴を更新
					history.pushState({}, '', url);

					// 画像の表示状態を更新
					document.querySelectorAll('.pattern-container').forEach((container) => {
						const images = container.querySelectorAll('img[data-pattern-type]');
						images.forEach((img) => {
							if (img.getAttribute('data-pattern-type') === currentImageType) {
								img.classList.remove('hidden');
							} else {
								img.classList.add('hidden');
							}
						});
					});

					// ページの先頭にスクロール
					window.scrollTo({
						top: 0,
						behavior: 'smooth'
					});
				} catch (error) {
					console.error('Navigation failed:', error);
					window.location.href = url; // フォールバック
				}
			}

			// 初期設定
			setupEventListeners();
		</script>
		<style>
			@keyframes slide-from-right {
				from { transform: translateX(100%); }
			}

			@keyframes slide-to-left {
				to { transform: translateX(-100%); }
			}

			::view-transition-old(root) {
				animation: 300ms cubic-bezier(0.4, 0, 0.2, 1) both slide-to-left;
			}

			::view-transition-new(root) {
				animation: 300ms cubic-bezier(0.4, 0, 0.2, 1) both slide-from-right;
			}
		</style>
	</head>
	<body class="min-h-screen flex flex-col bg-base-100 text-base-content">
		<Header />
		<main class="flex-grow container mx-auto px-4 py-8">
			<slot />
		</main>
		<Footer />
	</body>
</html>