---
import { getCollection } from 'astro:content';
import Pattern from '../components/Pattern.astro';
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import { extractColorsFromSVG, formatColorName } from '../utils/colorExtractor';
import fs from 'node:fs/promises';
import path from 'node:path';

export async function getStaticPaths() {
  const articles = await getCollection('patterns');
  // pubDateでソート
  const sortedArticles = articles.sort((a, b) => {
    return new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime();
  });
  
  return sortedArticles.map((article, index) => {
    // 現在の記事のインデックスを取得
    const currentIndex = sortedArticles.findIndex(a => a.id === article.id);
    // 前後の記事を取得（存在しない場合は undefined）
    const prevArticle = currentIndex < sortedArticles.length - 1 ? sortedArticles[currentIndex + 1] : undefined;
    const nextArticle = currentIndex > 0 ? sortedArticles[currentIndex - 1] : undefined;

    return {
      params: { slug: article.id.replace('.md', '') },
      props: {
        article,
        prevArticle,
        nextArticle,
      },
    };
  });
}

const { article, prevArticle, nextArticle } = Astro.props;

// SVGファイルを読み込んで色を抽出
const baseFileName = article.id.replace('patterns/', '').replace('.md', '');
const publicDir = path.join(process.cwd(), 'public');
const svgFilePath = path.join(publicDir, 'assets', `${baseFileName}_pixel.svg`);

let colors: string[] = [];
try {
  const svgContent = await fs.readFile(svgFilePath, 'utf-8');
  colors = extractColorsFromSVG(svgContent).map(formatColorName);
} catch (error) {
  // エラーは無視（色の抽出に失敗した場合は空の配列を使用）
}
---

<Layout title={article.data.title}>
  <Header />
  <Pattern
    article={article}
    prevArticle={prevArticle}
    nextArticle={nextArticle}
  />
</Layout> 