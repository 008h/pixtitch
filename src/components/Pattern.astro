---
import type { CollectionEntry } from 'astro:content';
import PatternImages from './PatternImages.astro';
import ColorPalette from './ColorPalette.astro';
import { extractColorsFromSVG, formatColorName } from '../utils/colorExtractor';
import fs from 'node:fs/promises';
import path from 'node:path';

interface Props {
  article: CollectionEntry<'patterns'>;
  prevArticle?: CollectionEntry<'patterns'>;
  nextArticle?: CollectionEntry<'patterns'>;
}

const { article, prevArticle, nextArticle } = Astro.props;
const { Content } = await article.render();

// ファイル名から.mdを除去
const baseName = article.id.replace('.md', '');

// SVGファイルを読み込んで色を抽出
const publicDir = path.join(process.cwd(), 'public');
const svgFilePath = path.join(publicDir, 'assets', `${baseName}_pixel.svg`);

let colors: string[] = [];
try {
  const svgContent = await fs.readFile(svgFilePath, 'utf-8');
  colors = extractColorsFromSVG(svgContent).map(formatColorName);
} catch (error) {
  // エラーは無視（色の抽出に失敗した場合は空の配列を使用）
}

// 日付のフォーマット関数
const formatDate = (date: Date) => {
  return date.toLocaleDateString('en-US', {
    month: 'long',
    year: 'numeric'
  });
};
---

<article>
  <header>
    <h1 class="text-3xl font-bold underline">{article.data.title}</h1>
    <p>
      {formatDate(article.data.pubDate)}
    </p>
    <div class="my-8">
      <PatternImages 
        baseName={baseName} 
        title={article.data.title} 
        enableSwitching={true}
        x={article.data.x}
        y={article.data.y}
        isDetailPage={true}
      />
    </div>
    {colors.length > 0 && <ColorPalette colors={colors} />}
  </header>

  <div>
    <Content />
  </div>

  <nav>
    <div>
      {prevArticle && (
        <a href={`${import.meta.env.BASE_URL}${prevArticle.id.replace('.md', '')}`}>
          ← {prevArticle.data.title}
        </a>
      )}
      {nextArticle && (
        <a href={`${import.meta.env.BASE_URL}${nextArticle.id.replace('.md', '')}`}>
          {nextArticle.data.title} →
        </a>
      )}
    </div>
  </nav>
</article> 