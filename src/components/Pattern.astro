---
import type { CollectionEntry } from 'astro:content';
import PatternImages from './PatternImages.astro';
import ColorPalette from './ColorPalette.astro';
import { extractColorsFromSVG, formatColorName } from '../utils/colorExtractor';
import fs from 'node:fs/promises';
import path from 'node:path';

interface Props {
  article: CollectionEntry<'patterns'>;
  prevArticle?: CollectionEntry<'patterns'>;
  nextArticle?: CollectionEntry<'patterns'>;
}

const { article, prevArticle, nextArticle } = Astro.props;
const { Content } = await article.render();

// ファイル名から.mdを除去
const baseName = article.id.replace('.md', '');

// SVGファイルを読み込んで色を抽出
const publicDir = path.join(process.cwd(), 'public');
const svgFilePath = path.join(publicDir, 'assets', `${baseName}_pixel.svg`);

let colors: string[] = [];
try {
  const svgContent = await fs.readFile(svgFilePath, 'utf-8');
  colors = extractColorsFromSVG(svgContent).map(formatColorName);
} catch (error) {
  // エラーは無視（色の抽出に失敗した場合は空の配列を使用）
}

// 前後の記事のSVGを読み込む
let prevSvgContent = '';
let nextSvgContent = '';

if (prevArticle) {
  const prevBaseName = prevArticle.id.replace('.md', '');
  const prevSvgPath = path.join(publicDir, 'assets', `${prevBaseName}_pixel.svg`);
  try {
    prevSvgContent = await fs.readFile(prevSvgPath, 'utf-8');
  } catch (error) {
    // エラーは無視
  }
}

if (nextArticle) {
  const nextBaseName = nextArticle.id.replace('.md', '');
  const nextSvgPath = path.join(publicDir, 'assets', `${nextBaseName}_pixel.svg`);
  try {
    nextSvgContent = await fs.readFile(nextSvgPath, 'utf-8');
  } catch (error) {
    // エラーは無視
  }
}

// 日付のフォーマット関数
const formatDate = (date: Date) => {
  return date.toLocaleDateString('en-US', {
    month: 'long',
    year: 'numeric'
  });
};
---

<article>
  <header class="text-base-content">
    <h1 class="text-3xl font-bold decoration-base-content/30">{article.data.title}</h1>
    <p class="text-base-content/70 mt-4">
      {formatDate(article.data.pubDate)}
    </p>
    <div class="my-8">
      <PatternImages 
        baseName={baseName} 
        title={article.data.title}
        x={article.data.x}
        y={article.data.y}
        isDetailPage={true}
      />
    </div>
    {colors.length > 0 && <ColorPalette colors={colors} />}
  </header>

  <div>
    <Content />
  </div>

  <nav class="flex justify-between items-center mt-8">
    <div class="flex items-center gap-2">
      {prevArticle && (
        <a 
          href={`${import.meta.env.BASE_URL}${prevArticle.id.replace('.md', '')}`}
          class="flex items-center gap-2 hover:opacity-80"
        >
          <div class="btn btn-ghost btn-circle">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              stroke-width="1.5"
              stroke="currentColor"
              class="w-6 h-6"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                d="M10.5 19.5L3 12m0 0l7.5-7.5M3 12h18"
              />
            </svg>
          </div>
          <div class="flex items-center gap-2">
            <div class="w-8 h-8 pattern-container">
              <img
                src={`${import.meta.env.BASE_URL}assets/${prevArticle.id.replace('.md', '')}_stitch.svg`}
                alt={`${prevArticle.data.title} / cross stitch like`}
                class="w-full h-full"
                data-type="stitch"
              />
              <img
                src={`${import.meta.env.BASE_URL}assets/${prevArticle.id.replace('.md', '')}_pixel.svg`}
                alt={`${prevArticle.data.title} / pixel art`}
                class="w-full h-full hidden"
                data-type="pixel"
              />
              <img
                src={`${import.meta.env.BASE_URL}assets/${prevArticle.id.replace('.md', '')}_pattern.svg`}
                alt={`${prevArticle.data.title} / pattern`}
                class="w-full h-full hidden"
                data-type="pattern"
              />
            </div>
            <span class="text-sm">{prevArticle.data.title}</span>
          </div>
        </a>
      )}
    </div>
    <div class="flex items-center gap-2">
      {nextArticle && (
        <a 
          href={`${import.meta.env.BASE_URL}${nextArticle.id.replace('.md', '')}`}
          class="flex items-center gap-2 hover:opacity-80"
        >
          <div class="flex items-center gap-2">
            <span class="text-sm">{nextArticle.data.title}</span>
            <div class="w-8 h-8 pattern-container">
              <img
                src={`${import.meta.env.BASE_URL}assets/${nextArticle.id.replace('.md', '')}_stitch.svg`}
                alt={`${nextArticle.data.title} / cross stitch like`}
                class="w-full h-full"
                data-type="stitch"
              />
              <img
                src={`${import.meta.env.BASE_URL}assets/${nextArticle.id.replace('.md', '')}_pixel.svg`}
                alt={`${nextArticle.data.title} / pixel art`}
                class="w-full h-full hidden"
                data-type="pixel"
              />
              <img
                src={`${import.meta.env.BASE_URL}assets/${nextArticle.id.replace('.md', '')}_pattern.svg`}
                alt={`${nextArticle.data.title} / pattern`}
                class="w-full h-full hidden"
                data-type="pattern"
              />
            </div>
          </div>
          <div class="btn btn-ghost btn-circle">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              stroke-width="1.5"
              stroke="currentColor"
              class="w-6 h-6"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                d="M13.5 4.5L21 12m0 0l-7.5 7.5M21 12H3"
              />
            </svg>
          </div>
        </a>
      )}
    </div>
  </nav>
</article> 