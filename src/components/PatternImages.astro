---
import { getCurrentImageType } from '../utils/imageType';

interface Props {
  baseName: string;
  title: string;
  x: number;
  y: number;
  isDetailPage?: boolean;
}

const { baseName, title, x, y, isDetailPage = false } = Astro.props;

// SVGファイルのパスを生成
const crossStitchPath = `${import.meta.env.BASE_URL}assets/${baseName}_cross-stitch.svg`;
const pixelSvgPath = `${import.meta.env.BASE_URL}assets/${baseName}_pixel.svg`;
const patternSvgPath = `${import.meta.env.BASE_URL}assets/${baseName}_pattern.svg`;

// スタイルを条件付きで設定
const containerStyle = isDetailPage 
  ? 'w-full' 
  : `w-[calc(var(--pattern-scale)*${x}rem)] h-[calc(var(--pattern-scale)*${y}rem)]`;

// 現在の画像タイプを取得
const currentType = getCurrentImageType();
---

<div 
  class="pattern-container" 
  style={isDetailPage ? undefined : `--pattern-width: ${x}; --pattern-height: ${y};`}
>
  <img
    src={crossStitchPath}
    alt={`${title} / cross stitch like`}
    class={`${containerStyle} ${currentType === 'cross-stitch' ? '' : 'hidden'}`}
    data-type="cross-stitch"
  />
  <img
    src={pixelSvgPath}
    alt={`${title} / pixel art`}
    class={`${containerStyle} ${currentType === 'pixel' ? '' : 'hidden'}`}
    data-type="pixel"
  />
  <img
    src={patternSvgPath}
    alt={`${title} / pattern`}
    class={`${containerStyle} ${currentType === 'pattern' ? '' : 'hidden'}`}
    data-type="pattern"
  />
</div>

<script>
  // 各コンポーネントで独立して状態を管理
  let currentType = 'cross-stitch';
  const types = ['cross-stitch', 'pixel', 'pattern'];

  // クリックイベントの設定
  document.querySelectorAll('.pattern-container').forEach((container) => {
    const enableSwitching = container.getAttribute('data-enable-switching') === 'true';
    
    if (enableSwitching) {
      (container as HTMLElement).style.cursor = 'pointer';
      container.addEventListener('click', () => {
        // 現在のタイプのインデックスを取得
        const currentIndex = types.indexOf(currentType);
        // 次のタイプを計算（最後の場合は最初に戻る）
        const nextIndex = (currentIndex + 1) % types.length;
        currentType = types[nextIndex];

        // カスタムイベントを発火
        const event = new CustomEvent('imageTypeChange', {
          detail: { type: currentType }
        });
        document.dispatchEvent(event);

        // すべての画像を非表示にしてから、現在のタイプの画像のみを表示
        const images = container.querySelectorAll('img[data-type]');
        images.forEach((img) => {
          if (img.getAttribute('data-type') === currentType) {
            img.classList.remove('hidden');
          } else {
            img.classList.add('hidden');
          }
        });
      });
    }
  });
</script>